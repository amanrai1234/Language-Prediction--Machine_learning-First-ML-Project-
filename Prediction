{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cd9a28f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Text</th>\n",
       "      <th>language</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>klement gottwaldi surnukeha palsameeriti ning ...</td>\n",
       "      <td>Estonian</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>sebes joseph pereira thomas  på eng the jesuit...</td>\n",
       "      <td>Swedish</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ถนนเจริญกรุง อักษรโรมัน thanon charoen krung เ...</td>\n",
       "      <td>Thai</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>விசாகப்பட்டினம் தமிழ்ச்சங்கத்தை இந்துப் பத்திர...</td>\n",
       "      <td>Tamil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>de spons behoort tot het geslacht haliclona en...</td>\n",
       "      <td>Dutch</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                Text  language\n",
       "0  klement gottwaldi surnukeha palsameeriti ning ...  Estonian\n",
       "1  sebes joseph pereira thomas  på eng the jesuit...   Swedish\n",
       "2  ถนนเจริญกรุง อักษรโรมัน thanon charoen krung เ...      Thai\n",
       "3  விசாகப்பட்டினம் தமிழ்ச்சங்கத்தை இந்துப் பத்திர...     Tamil\n",
       "4  de spons behoort tot het geslacht haliclona en...     Dutch"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import random \n",
    "import os\n",
    "from matplotlib import pyplot as plt\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Activation\n",
    "from tensorflow.keras.optimizers import SGD\n",
    "import pandas as pd\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import seaborn as sn\n",
    "\n",
    "from collections import Counter\n",
    "data=pd.read_csv(\"dataset.csv\")\n",
    "data.head()\n",
    "\n",
    "# IMPORTING THE LIBRARIES\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "29f721f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                    Text language\n",
      "21     en navidad de  poco después de que interpretó ...  Spanish\n",
      "37     in  johnson was awarded an american institute ...  English\n",
      "40     bussy-saint-georges has built its identity on ...  English\n",
      "76     minnesotas state parks are spread across the s...  English\n",
      "90     nordahl road is a station served by north coun...  English\n",
      "...                                                  ...      ...\n",
      "21951  the total high school population was now appro...  English\n",
      "21959  para colmo las tropas albanesas atacaban conti...  Spanish\n",
      "21975  fue fundado el  de octubre de  el día  de ese ...  Spanish\n",
      "21983  el investigador ha recibido varios reconocimie...  Spanish\n",
      "21997  con motivo de la celebración del septuagésimoq...  Spanish\n",
      "\n",
      "[2000 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "df=data.loc[(data['language']=='English') | (data['language']=='Spanish')]\n",
    "print(df)\n",
    "\n",
    "\n",
    "\n",
    "# SELECTING ONLY ENGLISH AND SPANISH DATA FROM THE DATASET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ef255893",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'english alphabets')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df1=data.loc[(data['language']=='English')]\n",
    "df2=data.loc[(data['language']=='Spanish')]\n",
    "eng_att=df1['Text']\n",
    "span_att=df2['Text']\n",
    "texts =\" \"\n",
    "for il in eng_att:\n",
    "    texts += il\n",
    "\n",
    "textsy=\" \"\n",
    "\n",
    "for yl in span_att:\n",
    "    textsy +=yl\n",
    "    \n",
    "a_county = textsy.count('a')\n",
    "b_county = textsy.count('b')\n",
    "c_county = textsy.count('c')\n",
    "d_county = textsy.count('d')\n",
    "e_county = textsy.count('e')\n",
    "f_county = textsy.count('f')\n",
    "g_county = textsy.count('g')\n",
    "h_county = textsy.count('h')\n",
    "i_county = textsy.count('i')\n",
    "j_county = textsy.count('j')\n",
    "k_county = textsy.count('k')\n",
    "l_county = textsy.count('l')\n",
    "m_county = textsy.count('m')\n",
    "n_county = textsy.count('n')\n",
    "o_county = textsy.count('o')\n",
    "p_county = textsy.count('p')\n",
    "q_county = textsy.count('q')\n",
    "r_county = textsy.count('r')\n",
    "s_county = textsy.count('s')\n",
    "t_county = textsy.count('t')\n",
    "u_county = textsy.count('u')\n",
    "v_county = textsy.count('v')\n",
    "w_county = textsy.count('w')\n",
    "x_county = textsy.count('x')\n",
    "y_county = textsy.count('y')\n",
    "z_county = textsy.count('z')\n",
    "\n",
    "\n",
    "\n",
    "    \n",
    "a_count = texts.count('a')\n",
    "b_count = texts.count('b')\n",
    "c_count = texts.count('c')\n",
    "d_count = texts.count('d')\n",
    "e_count = texts.count('e')\n",
    "f_count = texts.count('f')\n",
    "g_count = texts.count('g')\n",
    "h_count = texts.count('h')\n",
    "i_count = texts.count('i')\n",
    "j_count = texts.count('j')\n",
    "k_count = texts.count('k')\n",
    "l_count = texts.count('l')\n",
    "m_count = texts.count('m')\n",
    "n_count = texts.count('n')\n",
    "o_count = texts.count('o')\n",
    "p_count = texts.count('p')\n",
    "q_count = texts.count('q')\n",
    "r_count = texts.count('r')\n",
    "s_count = texts.count('s')\n",
    "t_count = texts.count('t')\n",
    "u_count = texts.count('u')\n",
    "v_count = texts.count('v')\n",
    "w_count = texts.count('w')\n",
    "x_count = texts.count('x')\n",
    "y_count = texts.count('y')\n",
    "z_count = texts.count('z')\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "%matplotlib inline\n",
    "\n",
    "\n",
    "\n",
    "eng_alp= ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n",
    "eng_alp_count = [a_count,b_count,c_count,d_count,e_count,f_count,g_count,h_count,i_count,j_count,k_count,l_count,m_count,n_count,o_count,p_count,q_count,r_count,s_count,t_count,u_count,v_count,w_count,x_count,y_count,z_count]\n",
    "\n",
    "\n",
    "#eng_alpha1 = plt.hist(n_count,o_count,p_count,q_count,r_count,s_count,t_count,u_count,v_count,w_count,x_count,y_count,z_count)\n",
    "plt.bar(eng_alp, eng_alp_count)\n",
    "plt.title(\"english alphabets\")\n",
    "\n",
    "\n",
    "# COUNTING THE FREQUENCY OF 26 LETTERS IN SPANISH AND ENGLISH TEXT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4dd2e9b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'spanish alphabets')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "span_alp_count = [a_county,b_county,c_county,d_county,e_county,f_county,g_county,h_county,i_county,j_county,k_county,l_county,m_county,n_county,o_county,p_county,q_county,r_county,s_county,t_county,u_county,v_county,w_county,x_county,y_county,z_county]\n",
    "plt.bar(eng_alp, span_alp_count)\n",
    "plt.title(\"spanish alphabets\")\n",
    "\n",
    "\n",
    "# VISUALIZING SPANISH ALPHABETS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "eca3de8d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-5-589a5e0831e0>:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['Text'] = df['Text'].str.lower()\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "50/50 [==============================] - 1s 3ms/step - loss: 3.7731\n",
      "Epoch 2/100\n",
      "50/50 [==============================] - 0s 3ms/step - loss: 2.7139\n",
      "Epoch 3/100\n",
      "50/50 [==============================] - 0s 3ms/step - loss: 2.1942\n",
      "Epoch 4/100\n",
      "50/50 [==============================] - 0s 4ms/step - loss: 1.7467\n",
      "Epoch 5/100\n",
      "50/50 [==============================] - 0s 4ms/step - loss: 1.4061\n",
      "Epoch 6/100\n",
      "50/50 [==============================] - 0s 4ms/step - loss: 1.1245\n",
      "Epoch 7/100\n",
      "50/50 [==============================] - 0s 3ms/step - loss: 0.9159\n",
      "Epoch 8/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.7547\n",
      "Epoch 9/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.6356\n",
      "Epoch 10/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.5409\n",
      "Epoch 11/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.4716\n",
      "Epoch 12/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.4136\n",
      "Epoch 13/100\n",
      "50/50 [==============================] - 0s 3ms/step - loss: 0.3633\n",
      "Epoch 14/100\n",
      "50/50 [==============================] - 0s 3ms/step - loss: 0.3226\n",
      "Epoch 15/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.2886\n",
      "Epoch 16/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.2602\n",
      "Epoch 17/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.2388\n",
      "Epoch 18/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.2185\n",
      "Epoch 19/100\n",
      "50/50 [==============================] - 0s 3ms/step - loss: 0.2023\n",
      "Epoch 20/100\n",
      "50/50 [==============================] - 0s 3ms/step - loss: 0.1878\n",
      "Epoch 21/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.1758\n",
      "Epoch 22/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.1641\n",
      "Epoch 23/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.1549\n",
      "Epoch 24/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.1457\n",
      "Epoch 25/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.1385\n",
      "Epoch 26/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.1318\n",
      "Epoch 27/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.1248\n",
      "Epoch 28/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.1193\n",
      "Epoch 29/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.1138\n",
      "Epoch 30/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.1086\n",
      "Epoch 31/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.1046\n",
      "Epoch 32/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0995\n",
      "Epoch 33/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0956\n",
      "Epoch 34/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0917\n",
      "Epoch 35/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0884\n",
      "Epoch 36/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0851\n",
      "Epoch 37/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0824\n",
      "Epoch 38/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0789\n",
      "Epoch 39/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0765\n",
      "Epoch 40/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0737\n",
      "Epoch 41/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0718\n",
      "Epoch 42/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0691\n",
      "Epoch 43/100\n",
      "50/50 [==============================] - 0s 3ms/step - loss: 0.0671\n",
      "Epoch 44/100\n",
      "50/50 [==============================] - 0s 3ms/step - loss: 0.0651\n",
      "Epoch 45/100\n",
      "50/50 [==============================] - 0s 3ms/step - loss: 0.0630\n",
      "Epoch 46/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0613\n",
      "Epoch 47/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0595\n",
      "Epoch 48/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0580\n",
      "Epoch 49/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0565\n",
      "Epoch 50/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0553\n",
      "Epoch 51/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0538\n",
      "Epoch 52/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0524\n",
      "Epoch 53/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0512\n",
      "Epoch 54/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0499\n",
      "Epoch 55/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0489\n",
      "Epoch 56/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0480\n",
      "Epoch 57/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0469\n",
      "Epoch 58/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0458\n",
      "Epoch 59/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0451\n",
      "Epoch 60/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0441\n",
      "Epoch 61/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0432\n",
      "Epoch 62/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0424\n",
      "Epoch 63/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0419\n",
      "Epoch 64/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0412\n",
      "Epoch 65/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0406\n",
      "Epoch 66/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0400\n",
      "Epoch 67/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0393\n",
      "Epoch 68/100\n",
      "50/50 [==============================] - 0s 3ms/step - loss: 0.0385\n",
      "Epoch 69/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0383\n",
      "Epoch 70/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0376\n",
      "Epoch 71/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0370\n",
      "Epoch 72/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0367\n",
      "Epoch 73/100\n",
      "50/50 [==============================] - 0s 3ms/step - loss: 0.0363\n",
      "Epoch 74/100\n",
      "50/50 [==============================] - 0s 3ms/step - loss: 0.0359\n",
      "Epoch 75/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0352\n",
      "Epoch 76/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0348\n",
      "Epoch 77/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0349\n",
      "Epoch 78/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0342\n",
      "Epoch 79/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0337\n",
      "Epoch 80/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0334\n",
      "Epoch 81/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0332\n",
      "Epoch 82/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0328\n",
      "Epoch 83/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0325\n",
      "Epoch 84/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0323\n",
      "Epoch 85/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0321\n",
      "Epoch 86/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0318\n",
      "Epoch 87/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0318\n",
      "Epoch 88/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0310\n",
      "Epoch 89/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0309\n",
      "Epoch 90/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0309\n",
      "Epoch 91/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0303\n",
      "Epoch 92/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0305\n",
      "Epoch 93/100\n",
      "50/50 [==============================] - 0s 2ms/step - loss: 0.0303\n",
      "Epoch 94/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0303\n",
      "Epoch 95/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0296\n",
      "Epoch 96/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0301\n",
      "Epoch 97/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0290\n",
      "Epoch 98/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0290\n",
      "Epoch 99/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0287\n",
      "Epoch 100/100\n",
      "50/50 [==============================] - 0s 1ms/step - loss: 0.0287\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x11e18b1aa60>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#eng_alpha1 = plt.hist(n_count,o_count,p_count,q_count,r_count,s_count,t_count,u_count,v_count,w_count,x_count,y_count,z_count)\n",
    "\n",
    "df['Text'] = df['Text'].str.lower()\n",
    "data_numpy=df.to_numpy()\n",
    "\n",
    "#print(data_numpy)\n",
    "\n",
    "dataset=np.zeros((len(data_numpy), 27), dtype=np.float_)\n",
    "\n",
    "for i in range(len(data_numpy)):\n",
    "    texts = data_numpy[i][0]\n",
    "    lang = data_numpy[i][1] == 'English'\n",
    "    \n",
    "      \n",
    "    dataset[i][0] = texts.count('a')\n",
    "    dataset[i][1] = texts.count('b')\n",
    "    dataset[i][2] = texts.count('c')\n",
    "    dataset[i][3] = texts.count('d')\n",
    "    dataset[i][4] = texts.count('e')\n",
    "    dataset[i][5] = texts.count('f')\n",
    "    dataset[i][6] = texts.count('g')\n",
    "    dataset[i][7] = texts.count('h')\n",
    "    dataset[i][8] = texts.count('i')\n",
    "    dataset[i][9] = texts.count('j')\n",
    "    dataset[i][10] = texts.count('k')\n",
    "    dataset[i][11] = texts.count('l')\n",
    "    dataset[i][12] = texts.count('m')\n",
    "    dataset[i][13] = texts.count('n')\n",
    "    dataset[i][14] = texts.count('o')\n",
    "    dataset[i][15] = texts.count('p')\n",
    "    dataset[i][16] = texts.count('q')\n",
    "    dataset[i][17] = texts.count('r')\n",
    "    dataset[i][18] = texts.count('s')\n",
    "    dataset[i][19] = texts.count('t')\n",
    "    dataset[i][20] = texts.count('u')\n",
    "    dataset[i][21] = texts.count('v')\n",
    "    dataset[i][22] = texts.count('w')\n",
    "    dataset[i][23] = texts.count('x')\n",
    "    dataset[i][24] = texts.count('y')\n",
    "    dataset[i][25] = texts.count('z')\n",
    "\n",
    "    dataset[i][26] = lang\n",
    "#print(dataset)\n",
    "\n",
    "\n",
    "from random import shuffle\n",
    "\n",
    "shuffle(dataset)\n",
    "train_data=dataset[:1600]\n",
    "test_data=dataset[1600:]\n",
    "model = Sequential()\n",
    "model.add(Dense(1, input_dim=26, activation='sigmoid'))\n",
    "#model.add(Activation('Sigmoid'))\n",
    "#sgd = SGD(0.01)\n",
    "model.compile(loss='binary_crossentropy',optimizer='adam')\n",
    "model.fit(train_data[:,:-1],train_data[:,-1],epochs=100,verbose=1)\n",
    "\n",
    "## In this segment i am implementing the linear regression to succesfully predict the languages (english and spanish ) based on the frequency count of the number of letters, I am also diving the data into the ratio of 80:20 so around 400 fields are kept for testing the model whereas the remaing is kept for training the model.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "84edc7ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2.28258669e-02]\n",
      " [9.99919295e-01]\n",
      " [1.65360798e-05]\n",
      " [1.43553393e-06]\n",
      " [3.97622585e-04]\n",
      " [1.15361810e-03]\n",
      " [1.00000000e+00]\n",
      " [4.95541096e-03]\n",
      " [1.70943141e-03]\n",
      " [5.66382110e-01]\n",
      " [1.00000000e+00]\n",
      " [9.99985635e-01]\n",
      " [9.99904573e-01]\n",
      " [9.99999762e-01]\n",
      " [9.99997497e-01]\n",
      " [6.47368270e-10]\n",
      " [1.48717165e-02]\n",
      " [9.91880059e-01]\n",
      " [1.00000000e+00]\n",
      " [2.82915802e-09]\n",
      " [1.70075680e-06]\n",
      " [9.99653876e-01]\n",
      " [9.99995828e-01]\n",
      " [9.94871736e-01]\n",
      " [1.59250524e-09]\n",
      " [9.99897838e-01]\n",
      " [1.33143067e-02]\n",
      " [6.29004444e-06]\n",
      " [1.68769658e-02]\n",
      " [8.08149980e-06]\n",
      " [3.59207392e-04]\n",
      " [1.00349826e-06]\n",
      " [5.17508388e-03]\n",
      " [9.60264802e-01]\n",
      " [9.99995828e-01]\n",
      " [3.91720641e-05]\n",
      " [7.00648570e-08]\n",
      " [8.39672327e-01]\n",
      " [9.99891758e-01]\n",
      " [4.93062144e-05]\n",
      " [9.99986053e-01]\n",
      " [5.56944611e-17]\n",
      " [3.83943319e-04]\n",
      " [9.99918103e-01]\n",
      " [9.99426603e-01]\n",
      " [1.00000000e+00]\n",
      " [2.50560045e-03]\n",
      " [1.42829482e-08]\n",
      " [1.80332422e-01]\n",
      " [8.47578049e-04]\n",
      " [9.98866081e-01]\n",
      " [9.61878959e-06]\n",
      " [3.54654112e-10]\n",
      " [9.13974964e-06]\n",
      " [3.64489108e-01]\n",
      " [9.97302651e-01]\n",
      " [2.83006921e-06]\n",
      " [8.57022285e-01]\n",
      " [8.82003963e-01]\n",
      " [9.99734521e-01]\n",
      " [9.99505460e-01]\n",
      " [3.95616412e-01]\n",
      " [9.99876976e-01]\n",
      " [9.97761488e-01]\n",
      " [9.99987125e-01]\n",
      " [1.51091328e-07]\n",
      " [9.99999762e-01]\n",
      " [1.24678382e-12]\n",
      " [1.00000000e+00]\n",
      " [6.35117292e-04]\n",
      " [9.99330282e-01]\n",
      " [9.96645689e-01]\n",
      " [9.99999762e-01]\n",
      " [9.97302651e-01]\n",
      " [8.56338441e-02]\n",
      " [6.13480806e-04]\n",
      " [2.53739357e-02]\n",
      " [3.64214182e-04]\n",
      " [9.99999285e-01]\n",
      " [9.46789980e-04]\n",
      " [9.99999642e-01]\n",
      " [4.46862370e-01]\n",
      " [1.00000000e+00]\n",
      " [1.00000000e+00]\n",
      " [2.04923526e-05]\n",
      " [3.97058602e-06]\n",
      " [9.94808674e-01]\n",
      " [1.00000000e+00]\n",
      " [1.70943141e-03]\n",
      " [6.91842888e-06]\n",
      " [9.23484564e-04]\n",
      " [9.99998987e-01]\n",
      " [7.59780407e-04]\n",
      " [1.00000000e+00]\n",
      " [2.75889039e-03]\n",
      " [9.97817159e-01]\n",
      " [9.99998033e-01]\n",
      " [1.00000000e+00]\n",
      " [9.06470299e-01]\n",
      " [2.88426876e-04]\n",
      " [1.16213391e-06]\n",
      " [9.98957396e-01]\n",
      " [9.99919295e-01]\n",
      " [5.18709421e-04]\n",
      " [9.94815350e-01]\n",
      " [1.15208745e-01]\n",
      " [9.96039391e-01]\n",
      " [1.51755214e-02]\n",
      " [1.00000000e+00]\n",
      " [2.90840864e-04]\n",
      " [1.00000000e+00]\n",
      " [3.93403172e-02]\n",
      " [1.00000000e+00]\n",
      " [1.52379274e-04]\n",
      " [5.86401094e-10]\n",
      " [7.60782200e-07]\n",
      " [6.23414792e-11]\n",
      " [9.82612371e-04]\n",
      " [9.20835009e-06]\n",
      " [1.00000000e+00]\n",
      " [1.48717165e-02]\n",
      " [7.53104687e-04]\n",
      " [1.11773610e-02]\n",
      " [1.00000000e+00]\n",
      " [2.90815638e-09]\n",
      " [3.00035685e-09]\n",
      " [9.99993205e-01]\n",
      " [6.92376712e-10]\n",
      " [3.50368555e-06]\n",
      " [3.01947457e-05]\n",
      " [7.04946501e-07]\n",
      " [1.80332422e-01]\n",
      " [1.48331821e-02]\n",
      " [4.19007391e-01]\n",
      " [1.00000000e+00]\n",
      " [2.53739357e-02]\n",
      " [1.00000000e+00]\n",
      " [1.35481358e-04]\n",
      " [1.96805596e-03]\n",
      " [8.47578049e-04]\n",
      " [9.97060001e-01]\n",
      " [8.08149980e-06]\n",
      " [9.99130845e-01]\n",
      " [2.98184568e-06]\n",
      " [1.73871278e-10]\n",
      " [1.00000000e+00]\n",
      " [9.99579430e-01]\n",
      " [4.01937962e-03]\n",
      " [1.00000000e+00]\n",
      " [1.24678382e-12]\n",
      " [1.09838453e-04]\n",
      " [9.99920964e-01]\n",
      " [9.77943540e-01]\n",
      " [9.99966145e-01]\n",
      " [5.22868931e-01]\n",
      " [9.99025583e-01]\n",
      " [7.56866217e-01]\n",
      " [9.79148269e-01]\n",
      " [9.69024897e-01]\n",
      " [4.42890496e-06]\n",
      " [1.20404620e-08]\n",
      " [1.96805596e-03]\n",
      " [1.00000000e+00]\n",
      " [1.01795793e-03]\n",
      " [8.70525837e-04]\n",
      " [3.52189163e-05]\n",
      " [9.99806046e-01]\n",
      " [9.99852777e-01]\n",
      " [1.00000000e+00]\n",
      " [1.13275647e-03]\n",
      " [1.51755214e-02]\n",
      " [9.99995828e-01]\n",
      " [3.54032516e-02]\n",
      " [1.16735697e-03]\n",
      " [9.95667100e-01]\n",
      " [4.14156496e-08]\n",
      " [2.62677670e-03]\n",
      " [4.93262213e-08]\n",
      " [9.46789980e-04]\n",
      " [9.72504497e-01]\n",
      " [6.61670268e-02]\n",
      " [8.13096762e-04]\n",
      " [1.00000000e+00]\n",
      " [1.35675907e-01]\n",
      " [1.70075680e-06]\n",
      " [9.97978210e-01]\n",
      " [4.73942717e-14]\n",
      " [2.63106062e-06]\n",
      " [4.27433848e-03]\n",
      " [9.99967098e-01]\n",
      " [9.69155788e-01]\n",
      " [9.90390778e-01]\n",
      " [6.93633795e-01]\n",
      " [7.09205866e-04]\n",
      " [3.87892127e-03]\n",
      " [9.07799959e-01]\n",
      " [1.00000000e+00]\n",
      " [9.99998689e-01]\n",
      " [1.39006972e-03]\n",
      " [7.59780407e-04]\n",
      " [1.16822434e-06]\n",
      " [9.89482224e-01]\n",
      " [1.70564651e-03]\n",
      " [9.77588534e-01]\n",
      " [9.61878959e-06]\n",
      " [6.87915564e-01]\n",
      " [9.71121550e-01]\n",
      " [9.76787508e-01]\n",
      " [6.66265786e-02]\n",
      " [1.00000000e+00]\n",
      " [1.00000000e+00]\n",
      " [1.00000000e+00]\n",
      " [9.99909759e-01]\n",
      " [1.25243366e-02]\n",
      " [1.55973434e-03]\n",
      " [2.99432576e-02]\n",
      " [3.23623419e-04]\n",
      " [9.99980032e-01]\n",
      " [6.76567868e-09]\n",
      " [2.49815512e-05]\n",
      " [2.14754939e-02]\n",
      " [8.34703743e-01]\n",
      " [9.34343731e-08]\n",
      " [2.82741517e-01]\n",
      " [1.72793865e-04]\n",
      " [3.43683098e-07]\n",
      " [5.84239124e-12]\n",
      " [1.00000000e+00]\n",
      " [1.87641382e-03]\n",
      " [1.06393563e-05]\n",
      " [1.35391951e-04]\n",
      " [1.00000000e+00]\n",
      " [1.58041716e-03]\n",
      " [1.00000000e+00]\n",
      " [4.92379577e-08]\n",
      " [1.30924471e-09]\n",
      " [9.99897122e-01]\n",
      " [4.08484727e-01]\n",
      " [9.99975562e-01]\n",
      " [1.00000000e+00]\n",
      " [9.99066114e-01]\n",
      " [4.11719084e-04]\n",
      " [9.98476386e-01]\n",
      " [7.04946501e-07]\n",
      " [9.99765217e-01]\n",
      " [4.42890496e-06]\n",
      " [9.99992490e-01]\n",
      " [9.74182308e-01]\n",
      " [2.36070156e-03]\n",
      " [1.00000000e+00]\n",
      " [9.95735526e-01]\n",
      " [9.74681318e-01]\n",
      " [4.46862370e-01]\n",
      " [3.16496491e-02]\n",
      " [1.01795793e-03]\n",
      " [8.58128071e-04]\n",
      " [9.99999464e-01]\n",
      " [9.99918103e-01]\n",
      " [1.00000000e+00]\n",
      " [3.16351652e-04]\n",
      " [3.42898170e-06]\n",
      " [9.96939063e-01]\n",
      " [9.99976516e-01]\n",
      " [1.00000000e+00]\n",
      " [9.99999404e-01]\n",
      " [1.09838453e-04]\n",
      " [2.22443759e-06]\n",
      " [2.90840864e-04]\n",
      " [1.05835845e-07]\n",
      " [7.04946501e-07]\n",
      " [9.99330282e-01]\n",
      " [1.03417897e-05]\n",
      " [9.99999642e-01]\n",
      " [9.97817159e-01]\n",
      " [1.00000000e+00]\n",
      " [1.00000000e+00]\n",
      " [1.75871025e-06]\n",
      " [4.93076235e-01]\n",
      " [9.99999404e-01]\n",
      " [9.98646021e-01]\n",
      " [1.45843071e-08]\n",
      " [1.30218267e-03]\n",
      " [2.69925594e-03]\n",
      " [9.98771429e-01]\n",
      " [9.95095849e-01]\n",
      " [9.99796510e-01]\n",
      " [1.00000000e+00]\n",
      " [1.00000000e+00]\n",
      " [3.87106925e-01]\n",
      " [1.00000000e+00]\n",
      " [6.79012899e-08]\n",
      " [9.99970436e-01]\n",
      " [4.58430938e-09]\n",
      " [9.99947309e-01]\n",
      " [5.29338539e-01]\n",
      " [7.24211350e-05]\n",
      " [9.72558119e-05]\n",
      " [2.95145173e-06]\n",
      " [1.00000000e+00]\n",
      " [1.73871278e-10]\n",
      " [1.00000000e+00]\n",
      " [2.00307369e-03]\n",
      " [1.00000000e+00]\n",
      " [2.20190230e-08]\n",
      " [9.99909759e-01]\n",
      " [9.99996603e-01]\n",
      " [9.98314142e-01]\n",
      " [1.00000000e+00]\n",
      " [1.06043830e-04]\n",
      " [9.99997020e-01]\n",
      " [1.00000000e+00]\n",
      " [1.00000000e+00]\n",
      " [1.00000000e+00]\n",
      " [9.99986053e-01]\n",
      " [3.25951278e-02]\n",
      " [9.99943256e-01]\n",
      " [9.99938190e-01]\n",
      " [9.99999344e-01]\n",
      " [1.00000000e+00]\n",
      " [2.68596411e-03]\n",
      " [4.26888400e-05]\n",
      " [2.69134599e-08]\n",
      " [9.99993205e-01]\n",
      " [1.00000000e+00]\n",
      " [9.72558119e-05]\n",
      " [1.43977729e-06]\n",
      " [1.00000000e+00]\n",
      " [1.00000000e+00]\n",
      " [7.27107465e-01]\n",
      " [4.78965044e-03]\n",
      " [9.75735903e-01]\n",
      " [9.99999702e-01]\n",
      " [1.00000000e+00]\n",
      " [1.49488449e-04]\n",
      " [9.79815125e-01]\n",
      " [9.99847412e-01]\n",
      " [9.65207815e-04]\n",
      " [9.69155788e-01]\n",
      " [6.81132078e-04]\n",
      " [9.99756694e-01]\n",
      " [9.99934554e-01]\n",
      " [2.24203795e-01]\n",
      " [1.00000000e+00]\n",
      " [1.00000000e+00]\n",
      " [9.91613746e-01]\n",
      " [1.57493353e-03]\n",
      " [1.30924471e-09]\n",
      " [1.00000000e+00]\n",
      " [9.99370158e-01]\n",
      " [9.95405078e-01]\n",
      " [2.45880784e-07]\n",
      " [7.15542734e-02]\n",
      " [1.13651156e-02]\n",
      " [9.33697820e-03]\n",
      " [9.98245180e-01]\n",
      " [1.13113470e-06]\n",
      " [9.99999046e-01]\n",
      " [9.99996483e-01]\n",
      " [9.99999762e-01]\n",
      " [2.56800763e-06]\n",
      " [1.00000000e+00]\n",
      " [5.87747317e-09]\n",
      " [4.76454488e-13]\n",
      " [9.99997139e-01]\n",
      " [9.99994874e-01]\n",
      " [9.99946237e-01]\n",
      " [9.74177419e-06]\n",
      " [7.56866217e-01]\n",
      " [6.57051802e-04]\n",
      " [2.10091840e-11]\n",
      " [9.99783516e-01]\n",
      " [8.98841321e-01]\n",
      " [3.54654112e-10]\n",
      " [9.98866081e-01]\n",
      " [9.98605192e-01]\n",
      " [3.80023122e-01]\n",
      " [6.92376712e-10]\n",
      " [9.60675001e-01]\n",
      " [1.42893195e-03]\n",
      " [1.25254583e-05]\n",
      " [1.66766565e-08]\n",
      " [7.76872516e-01]\n",
      " [9.98861551e-01]\n",
      " [1.72109472e-16]\n",
      " [1.16822434e-06]\n",
      " [6.61670268e-02]\n",
      " [9.99936819e-01]\n",
      " [4.72146273e-03]\n",
      " [2.98184568e-06]\n",
      " [1.00000000e+00]\n",
      " [7.11835623e-02]\n",
      " [3.23086977e-04]\n",
      " [4.87163959e-07]\n",
      " [1.00000000e+00]\n",
      " [3.76823246e-02]\n",
      " [1.00000000e+00]\n",
      " [9.99885917e-01]\n",
      " [2.76225805e-03]\n",
      " [9.95421886e-01]\n",
      " [1.00000000e+00]]\n"
     ]
    }
   ],
   "source": [
    "lists=model.predict(test_data[:,:-1])\n",
    "#print(type(lists))\n",
    "print(lists)\n",
    "#print(test_data[0,-1])\n",
    "\n",
    "# I'm predicting the values of the model here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "97c92023",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "193\n",
      "3\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "true_positive=0\n",
    "false_positive=0\n",
    "false_negative=0\n",
    "\n",
    "correct=0\n",
    "for id in range(len(test_data)):\n",
    "\n",
    "    if lists[id][0] >= 0.5:\n",
    "        if test_data[id,-1]==1:\n",
    "            true_positive+=1\n",
    "        else:\n",
    "            false_positive+=1\n",
    "    else:\n",
    "        if test_data[id,-1]==1:\n",
    "            false_negative+=1\n",
    "            \n",
    "            \n",
    "        \n",
    "print(true_positive)\n",
    "print(false_positive)\n",
    "print(false_negative)\n",
    "            \n",
    "            \n",
    "            \n",
    "    \n",
    "    \n",
    "# Here I'm manually calculating the true positives, false negatives and false positives to check my precision and recall of the model   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "126a3865",
   "metadata": {},
   "outputs": [],
   "source": [
    "precision = true_positive/(true_positive+false_positive)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "dc983383",
   "metadata": {},
   "outputs": [],
   "source": [
    "recall=true_positive/(true_positive+false_negative)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "81175b4a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9846938775510204\n",
      "0.9698492462311558\n"
     ]
    }
   ],
   "source": [
    "print(precision)\n",
    "print(recall)\n",
    "# These show the precision and recall"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0a710678",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(69.0, 0.5, 'Truth')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## I'm creating the confusio matrix o evaluate the metrics of my prediction, To evaluate the model I got the preciosn and recall and it was around 98 percent and  as we know the more it is, the better model is, the accuract of the model is also around 98 percent(393/400)\n",
    "\n",
    "x_test=np.reshape(test_data[:,-1], (400,))\n",
    "y_test=np.reshape(lists>0.5, (400,))\n",
    "cm = confusion_matrix(x_test, y_test)\n",
    "cm\n",
    "\n",
    "plt.figure(figsize = (10,7))\n",
    "sn.heatmap(cm, annot=True, fmt='g')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Truth')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4be5c12",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
